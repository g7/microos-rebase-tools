#!/bin/bash
#
# microos-rebase-tools
# Copyright (C) 2023  Eugenio Paolantonio <me@medesimo.eu>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#

set -e

script_path=$(realpath "${BASH_SOURCE:-${0}}")
cd "$(dirname ${script_path})"

source ./lib/common.sh
source ./lib/kiwi.sh
source ./lib/tarfile.sh
source ./lib/podman.sh
source ./lib/workarounds.sh

usage() {
	cat <<EOF
Usage: $0 <TARGETDIR> [PACKAGE|IMAGE]... [KIWI_EXTRA_ARGS]...

Rebuilds a MicroOS installation, and merges the configuration files from the
running system.

Example:

    $0 /.snapshots/40/snapshot patterns-microos-desktop-gnome

Builds a MicroOS tree in /.snapshots/40/snapshot with patterns-microos-desktop-gnome
installed.

    $0 /.snapshots/40/snapshot https://example.com/opensuse/opensuse-aeon.kiwi

Builds a MicroOS tree in /.snapshots/40/snapshot using the supplied kiwi
template.

    $0 /.snapshots/40/snapshot https://example.com/opensuse/aeon-tree.tar.xz

Downloads a prebuilt MicroOS tree in /.snapshots/40/snapshot and applies the
configuration changes there.

Builds a MicroOS tree in /.snapshots/40/snapshot using the supplied kiwi
template.

    $0 /.snapshots/40/snapshot oci://registry.opensuse.org/container/kalpa

Downloads a prebuilt MicroOS tree from an OCI registry, exports it in /.snapshots/40/snapshot
and applies the configuration changes there.

    $0 /.snapshots/40/snapshot https://example.com/opensuse/opensuse-aeon.kiwi --kiwi-add-package=geany

Builds a MicroOS tree in /.snapshots/40/snapshot with pattern-microos-aeon
installed, and passes '--add-package=geany' to the kiwi process.
EOF
}


# Parse args... we don't really need getopts right now but might in future
if [ -z "${2}" ]; then
	usage
	error "Not enough arguments supplied"
fi

TARGET_DIR="${1}"
shift
PACKAGES=""
for arg in ${@}; do
	if [[ ${arg} == *--kiwi-* ]]; then
		# Kiwi extra args started, we'll catch them later
		break
	fi

	PACKAGES="${PACKAGES}${arg}"
	shift
done
KIWI_EXTRA_ARGS="${@//--kiwi-/--}"

###############################################################################

TEMPORARY_DIR="$(mktemp -d)"
cleanup() {
	info "Removing temporary directory"
	rm -rf "${TEMPORARY_DIR}"
}
trap cleanup EXIT

# Try to determine the image type. We support the following for now:
# * Autogenerated kiwi file
# * Custom kiwi file built by the user, that can be in filesystem or online
# * Pre-generated tree, that can be in filesystem or online
# * Pre-generated OCI container

MODE="autogenerated"
for package in ${PACKAGES}; do
	if [[ ${package} == *.kiwi ]] || [[ ${package} == *.xml ]]; then
		# Kiwi file
		MODE="custom_kiwi"

		download_uri "${package}" "${TEMPORARY_DIR}/rebase.kiwi"
		break
	elif [[ ${package} == *.tar.* ]]; then
		# FIXME, this is not smart
		# Prebuilt tar
		MODE="tarfile"

		download_uri "${package}" "${TEMPORARY_DIR}/rootfs_archive.tar"
		tarfile_extract "${TEMPORARY_DIR}/rootfs_archive.tar" "${TARGET_DIR}"
		break
	elif [[ ${package} == oci://* ]]; then
		# OCI Container
		MODE="oci"

		image=${package/oci:\/\//}
		image_id=$(podman_pull ${image})
		podman_export_to_dir "${image_id}" "${TARGET_DIR}"
		break
	fi

	# If we're here, these are packages that needs to be added to our
	# autogenerated kiwi
	KIWI_EXTRA_ARGS="${KIWI_EXTRA_ARGS} --add-package=${package}"
done

# Generate the configuration file
if [ "${MODE}" == "autogenerated" ]; then
	kiwi_build_configuration "${TEMPORARY_DIR}/rebase.kiwi"
fi

if [ "${MODE}" == "autogenerated" ] || [ "${MODE}" == "custom_kiwi" ]; then
	kiwi_prepare "${MODE}" "${TEMPORARY_DIR}" "${TARGET_DIR}" ${KIWI_EXTRA_ARGS}
fi

# Run etcrebase
etcrebase "${TARGET_DIR}"

# Final cleanups
cleanups_apply "${TARGET_DIR}"

# Create overlay dir
overlay_create "${TARGET_DIR}"

# Apply workarounds
workarounds_apply "${TARGET_DIR}"
